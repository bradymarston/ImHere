@page "/statisticalreports"
@attribute [Authorize]

@using ImHere.Services
@inject ReportingService _reportingService
@inject EventService _eventService 

<h1>Statistical Report</h1>

<div class="form-row col-md-11 col-lg-8 col-xl-6">
    <div class="form-group col-sm-6">
        <label for="start-date">Start Date</label>
        <input type="date" id="start-date" class="form-control" @bind-value="Start" />
    </div>
    <div class="form-group col-sm-6">
        <label for="end-date">End Date</label>
        <input type="date" id="end-date" class="form-control" @bind-value="End" />
    </div>
</div>
<div class="form-row col-md-11 col-lg-8 col-xl-6">
    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Available Events</h5>
                <p class="card-text">(Click to add)</p>
                <div class="list-group">
                    @foreach (var e in DistinctEvents.Where(e => !SelectedEvents.Contains(e)))
                    {
                      <button type="button" @onclick="() => {
                          SelectedEvents.Add(e);
                          UpdateUrls();
                      }" class="list-group-item list-group-item-action">@e.Name</button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Selected Events</h5>
                <p class="card-text">(Click to remove)</p>
                <div class="list-group">
                    @foreach (var e in SelectedEvents.Where(e => DistinctEvents.Contains(e)).OrderBy(e => e.Name))
                    {
                      <button type="button" @onclick="() => {
                          SelectedEvents.Remove(e);
                          UpdateUrls();
                      }" class="list-group-item list-group-item-action">@e.Name</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    <button class="btn btn-primary" @onclick="GenerateReportAsync" disabled="@fetchingEvents">
        Generate Report
    </button>
</div>
<p />
<div class="form-row col-md-11 col-lg-8 col-xl-6">
    <div class="text-right">
        <p>
            <strong>Unique Attendees: @UniqueStudentCounts.Sum(c => c.Value)</strong>
            @foreach (var count in UniqueStudentCounts)
            {
                <div>@($"{count.Key}: {count.Value}")</div>
            }
        </p>
        @if (EventInstanceCount > 0)
        {
            <p>
                <strong>Attendance Average: @((CheckInCounts.Sum(c => c.Value) / (double)EventInstanceCount).ToString("0.0"))</strong>
                @foreach (var count in CheckInCounts)
                {
                    <div>@($"{count.Key}: {(count.Value / (double)EventInstanceCount).ToString("0.0")}")</div>
                }
            </p>
        }
        <p>
            <strong>Attendance Total: @CheckInCounts.Sum(c => c.Value)</strong>
            @foreach (var count in CheckInCounts)
            {
                <div>@($"{count.Key}: {count.Value}")</div>
            }
        </p>
    </div>
</div>

<h4>Excel Reports: (right-click to save)</h4>
<a href="@("api/report/student-list" + urlDateRangeSegment + "?" + urlEventIdsSegment)" disabled="@fetchingEvents">Student Report</a>

@code {
    public IDictionary<string, int> CheckInCounts { get; set; }
    public IDictionary<string, int> UniqueStudentCounts { get; set; }
    public IList<(int Id, string Name)> DistinctEvents = new List<(int Id, string Name)>();
    public IList<(int Id, string Name)> SelectedEvents = new List<(int Id, string Name)>();
    public int EventInstanceCount { get; set; }

    private string urlDateRangeSegment = "";
    private string urlEventIdsSegment = "";
    private bool fetchingEvents = true;

    private DateTime _start = new DateTime(2019, 1, 1);
    private DateTime _end = new DateTime(2020, 12, 31);


    public DateTime Start
    {
        get
        {
            return _start;
        }
        set
        {
            _start = value;
            GetEventsAsync();
            UpdateUrls();
        }
    }

    public DateTime End
    {
        get
        {
            return _end;
        }
        set
        {
            _end = value;
            GetEventsAsync();
            UpdateUrls();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var schoolStartYear = DateTime.UtcNow.Month > 7 ? DateTime.UtcNow.Year : DateTime.UtcNow.Year - 1;

        Start = new DateTime(schoolStartYear, 8, 1);
        End = Start + TimeSpan.FromDays(365);

        await GetEventsAsync();

        await GenerateReportAsync();

        await base.OnInitializedAsync();
    }

    private async Task GenerateReportAsync()
    {
        var normalizedEnd = End + TimeSpan.FromDays(1);
        CheckInCounts = await _reportingService.GetCheckInCountsAsync(Start, normalizedEnd, SelectedEvents.Select(e => e.Id).ToList());
        UniqueStudentCounts = await _reportingService.GetUniqueStudentCountsAsync(Start, normalizedEnd, SelectedEvents.Select(e => e.Id).ToList());
        EventInstanceCount = await _reportingService.GetEventInstanceCountAsync(Start, normalizedEnd, SelectedEvents.Select(e => e.Id).ToList());
    }

    private void UpdateUrls()
    {
        urlDateRangeSegment = $"/{Start.Month}-{Start.Day}-{Start.Year}/{End.Month}-{End.Day}-{End.Year}";
        urlEventIdsSegment = SelectedEvents.Count > 0 ? "eventIds=" + String.Join("&eventIds=", SelectedEvents.Select(e => e.Id.ToString())) : "";
    }

    private async Task GetEventsAsync()
    {
        fetchingEvents = true;
        DistinctEvents = (await _eventService.GetEventsAsync(Start, End + TimeSpan.FromDays(1))).Select(e => (e.Id, e.Name)).OrderBy(e => e.Name).ToList();
        fetchingEvents = false;
    }
}
