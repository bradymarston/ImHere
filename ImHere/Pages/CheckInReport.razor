@page "/checkinreports"
@attribute [Authorize]

@using ImHere.Services
@using ImHere.Services.Dtos
@inject ReportingService _reportingService

<h1>Event Report - Overall</h1>


<div class="row">
    <div class="col-md-11 col-lg-8 col-xl-6">
        <p />
        <div class="row">
            <div class="col">
                <span class="oi oi-star" /> = Admin logged check-in
            </div>
            <div class="col">
                <select class="form-control" @oninput="FilterChanged">
                    <option value="0">All Events</option>
                    @foreach (var e in DistinctEvents)
                    {
                    <option value="@e.Id">@e.Name</option>
                    }
                </select>
            </div>
        </div>
        <p />
        <table class="table table-borderless">
            <thead class="thead-light">
                <tr>
                    <th style="width: 0.1%; white-space: nowrap;"></th>
                    <th scope="col">Event Name</th>
                    <th scope="col">Date</th>
                    <th scope="col"># Checked In</th>
                    <th scpoe="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in FilteredEvents)
                {
                    <tr @onclick="() => EventClicked(e)">
                        <td>
                            <span class=@(e == SelectedEvent ? "oi oi-chevron-top" : "oi oi-chevron-bottom") aria-hidden="true"></span>
                        </td>
                        <th scope="row">@e.Name</th>
                        <td>@e.InstanceStart.ToShortDateString()</td>
                        <td>@e.CheckIns.Count()</td>
                        <td>
                            <a class="btn btn-secondary" href="@($"api/report/checkins/{e.EventId}/{e.InstanceStart.ToString("M-d-yyyy-H-m-s")}")">
                                <span class="oi oi-list"></span>
                            </a>
                        </td>
                    </tr>
                    @if (e == SelectedEvent)
                    {
                        <tr>
                            <td></td>
                            <td colspan="3">
                                @foreach (var count in GetCountsByType(SelectedEvent))
                                {
                                    <div>@($"{count.Key} count: {count.Value}")</div>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td></td>
                            <td colspan="3">
                                <table class="table">
                                    <thead class="thead-light">
                                        <tr>
                                            <th scope="col"></th>
                                            <th scope="col">Attendee Name</th>
                                            <th></th>
                                            <th scope="col">Check-In Time</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var c in e.CheckIns)
                                        {
                                            <tr>
                                                <td>
                                                    @if (c.IsAdminCheckIn)
                                                    {
                                                        <span class="oi oi-star" />
                                                    }
                                                </td>
                                                <th scope="row">@c.Student.DisplayName</th>
                                                <td class="text-right text-muted">@c.Student.StudentTypeDescription</td>
                                                <td class="text-right">@c.TimeStamp.ToShortTimeString()</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                }
                <tr class="bg-light">
                    <td></td>
                    <td><strong>Average</strong></td>
                    <td></td>
                    <td><strong>@FilteredEvents.Average(e => e.CheckIns.Count()).ToString("0.0")</strong></td>
                </tr>
            </tbody>
        </table>
        <p />
    </div>
</div>

@code {
    public IEnumerable<EventInstanceDto> Events = new List<EventInstanceDto>();
    public IEnumerable<EventInstanceDto> FilteredEvents = new List<EventInstanceDto>();
    public IList<(int Id, string Name)> DistinctEvents = new List<(int Id, string Name)>();
    public EventInstanceDto SelectedEvent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FilteredEvents = Events = (await _reportingService.GetEventInstancesAsync()).OrderByDescending(e => e.InstanceStart);
        DistinctEvents = Events.GroupBy(e => e.EventId).Select(g => (g.First().EventId, g.First().Name)).OrderBy(d => d.Name).ToList();

        await base.OnInitializedAsync();
    }

    private void EventClicked(EventInstanceDto @event)
    {
        SelectedEvent = SelectedEvent == @event ? null : @event;
    }

    private IDictionary<string, int> GetCountsByType(EventInstanceDto testEvent)
    {
        var counts = testEvent.CheckIns.GroupBy(c => c.Student.StudentTypeId).ToDictionary(g => g.First().Student.StudentTypeDescription, g => g.Count());

        return counts;
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        var newFilter = int.Parse((string)args.Value);

        if (newFilter == 0)
            FilteredEvents = Events;
        else
            FilteredEvents = Events.Where(e => e.EventId == newFilter);

        if (!FilteredEvents.Contains(SelectedEvent))
            SelectedEvent = null;
    }
}
