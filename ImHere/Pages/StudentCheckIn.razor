@page "/studentcheckin/{StudentId:int}/{EventId:int}"

@using ImHere.Services
@using ImHere.Services.Dtos
@using ImHere.Data.Models

@inject StudentService _studentService
@inject EventService  _eventService
@inject CheckInService  _checkInService
@inject NavigationManager  _navigationManager

@if (student is null)
{
    <h1>Student not found</h1>
}
else
{
    @if (selectedEvent is null)
    {
        <h1>Event not found</h1>
    }
    else
    {
        <h1>Welcome @student.DisplayName</h1>
        if (confirmingMethodism)
        {
            <h4>Are you Methodist?</h4>
            <p />
            <button class="btn btn-primary" @onclick="async () => await SetMethodismAsync(true)" disabled="@isBusy">
                <BusyIcon IconClass="oi-check" IsBusy="@isSettingMethodismYes" /> Yes, I am Methodist
            </button>
            <button class="btn btn-secondary" @onclick="async () => await SetMethodismAsync(false)" disabled="@isBusy">
                <BusyIcon IconClass="oi-x" IsBusy="@isSettingMethodismNo" /> No, I am not Methodist or I prefer not to answer
            </button>
            <p></p>
            <div>
                <NavLink href="" class="@($"btn btn-secondary {(isBusy ? "disabled" : "")}")">
                    <span class="oi oi-x"></span> Cancel
                </NavLink>
            </div>
        }
        else
        {
            if (settingLocalChurch)
            {
                <h4>Do you attend a local church</h4>
                <p />
                <button class="btn btn-primary" @onclick="async () => await SetLocalChurchAsync(LocalChurch.Methodist)" disabled="@isBusy">
                    <BusyIcon IconClass="oi-check" IsBusy="@isSettingLocalChurchMethodist" /> Yes, a Methodist church
                </button>
                <button class="btn btn-primary" @onclick="async () => await SetLocalChurchAsync(LocalChurch.NonMethodist)" disabled="@isBusy">
                    <BusyIcon IconClass="oi-check" IsBusy="@isSettingLocalChurchNonMethodist" /> Yes, a non-Methodist church
                </button>
                <button class="btn btn-secondary" @onclick="async () => await SetLocalChurchAsync(LocalChurch.None)" disabled="@isBusy">
                    <BusyIcon IconClass="oi-x" IsBusy="@isSettingLocalChurchNone" /> No, or I prefer not to answer
                </button>
                <p></p>
                <div>
                    <NavLink href="" class="@($"btn btn-secondary {(isBusy ? "disabled" : "")}")">
                        <span class="oi oi-x"></span> Cancel
                    </NavLink>
                </div>
            }
            else
            {
                @if (confirmedMethodism || didSetLocalChurch)
                {
                    <h4>Thank you</h4>
                    <p />
                }
                <button type="button" class="btn btn-success" @onclick="DoCheckInAsync" disabled="@isBusy">
                    <BusyIcon IconClass="oi-check" IsBusy="@isCheckingIn" /> Finish Check-In to @selectedEvent.Name
                </button>
                <NavLink href="" class="@($"btn btn-secondary {(isBusy ? "disabled" : "")}")">
                    <span class="oi oi-x"></span> Cancel
                </NavLink>
            }
        }
    }
}

@code {
    [Parameter]
    public int StudentId { get; set; }
    [Parameter]
    public int EventId { get; set; }

    private bool isBusy => isCheckingIn || isSettingMethodismYes || isSettingMethodismNo || isSettingLocalChurchMethodist || isSettingLocalChurchNonMethodist || isSettingLocalChurchNone;

    private bool isCheckingIn = false;
    private bool isSettingMethodismYes = false;
    private bool isSettingMethodismNo = false;
    private bool isSettingLocalChurchMethodist = false;
    private bool isSettingLocalChurchNonMethodist = false;
    private bool isSettingLocalChurchNone = false;

    private StudentDto student;
    private EventDto selectedEvent;

    private bool confirmingMethodism = false;
    private bool confirmedMethodism = false;

    private bool settingLocalChurch = false;
    private bool didSetLocalChurch = false;

    protected async override Task OnParametersSetAsync()
    {
        student = await _studentService.GetStudentAsync(StudentId);
        selectedEvent = await _eventService.GetEventAsync(EventId);

        var newestCheckIn = await _checkInService.GetLatestStudentCheckInAsync(StudentId);

        if (newestCheckIn != null)
        {
            if (newestCheckIn.TimeStamp < new DateTime(2020, 1, 28))
            {
                var oldestCheckIn = await _checkInService.GetFirstStudentCheckInAsync(StudentId);

                if (oldestCheckIn.TimeStamp < new DateTime(2020, 1, 17))
                {
                    confirmingMethodism = true;
                }
            }

            if (newestCheckIn.TimeStamp < new DateTime(2020, 8, 7))
            {
                settingLocalChurch = true;
            }
        }
        else
        {
            confirmingMethodism = true;
            settingLocalChurch = true;
        }

        await base.OnParametersSetAsync();
    }

    private async Task SetMethodismAsync(bool isMethodist)
    {
        if (isMethodist)
            isSettingMethodismYes = true;
        else
            isSettingMethodismNo = true;
        StateHasChanged();
        await _studentService.SetMethodismAsync(StudentId, isMethodist);
        isSettingMethodismYes = false;
        isSettingMethodismNo = false;
        confirmingMethodism = false;
        confirmedMethodism = true;
    }

    private async Task SetLocalChurchAsync(LocalChurch localChurch)
    {
        switch (localChurch)
        {
            case LocalChurch.Methodist:
                isSettingLocalChurchMethodist = true;
                break;
            case LocalChurch.NonMethodist:
                isSettingLocalChurchNonMethodist = true;
                break;
            default:
                isSettingLocalChurchNone = true;
                break;
        }
        StateHasChanged();
        await _studentService.SetLocalChurchAsync(StudentId, localChurch);
        isSettingLocalChurchMethodist = false;
        isSettingLocalChurchNonMethodist = false;
        isSettingLocalChurchNonMethodist = false;
        settingLocalChurch = false;
        didSetLocalChurch = true;

    }

    private async Task DoCheckInAsync()
    {

        isCheckingIn = true;
        StateHasChanged();
        try
        {
            await _checkInService.CheckInAsync(EventId, StudentId);
        }
        catch
        {
            _navigationManager.NavigateTo("/checkinfailed");
            return;
        }

        _navigationManager.NavigateTo("/index/" + EventId);
    }
}