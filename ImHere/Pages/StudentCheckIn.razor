@page "/studentcheckin/{StudentId:int}/{EventId:int}"

@using ImHere.Services
@using ImHere.Services.Dtos

@inject StudentService _studentService
@inject EventService  _eventService
@inject CheckInService  _checkInService
@inject NavigationManager  _navigationManager

@if (student is null)
{
    <h1>Student not found</h1>
}
else
{
    @if (selectedEvent is null)
    {
        <h1>Event not found</h1>
    }
    else
    {
        <h1>Welcome @student.DisplayName</h1>
        if (confirmingMethodism)
        {
            <h4>Are you Methodist?</h4>
            <p />
            <button class="btn btn-primary" @onclick="async () => await SetMethodismAsync(true)">
                Yes, I am Methodist
            </button>
            <button class="btn btn-secondary" @onclick="async () => await SetMethodismAsync(false)">
                No, I am not Methodist or I prefer not to answer
            </button>
        }
        else
        {
            @if (confirmedMethodism)
            {
                <h4>Thank you</h4>
                <p />
            }
            <button type="button" class="btn btn-success" @onclick="DoCheckInAsync">
                <span class="oi oi-check"></span> Finish Check-In to @selectedEvent.Name
            </button>
            <NavLink href="" class="btn btn-secondary">
                <span class="oi oi-x"></span> Cancel
            </NavLink>
        }
    }
}

@code {
    [Parameter]
    public int StudentId { get; set; }
    [Parameter]
    public int EventId { get; set; }

    private StudentDto student;
    private EventDto selectedEvent;

    private bool confirmingMethodism = false;
    private bool confirmedMethodism = false;

    protected async override Task OnParametersSetAsync()
    {
        student = await _studentService.GetStudentAsync(StudentId);
        selectedEvent = await _eventService.GetEventAsync(EventId);

        var newestCheckIn = await _checkInService.GetLatestStudentCheckInAsync(StudentId);

        if (newestCheckIn != null)
        {
            if (newestCheckIn.TimeStamp < new DateTime(2020, 1, 28))
            {
                var oldestCheckIn = await _checkInService.GetFirstStudentCheckInAsync(StudentId);

                if (oldestCheckIn.TimeStamp < new DateTime(2020, 1, 17))
                {
                    confirmingMethodism = true;
                    return;
                }
            }
        }

        await base.OnParametersSetAsync();
    }

    private async Task SetMethodismAsync(bool isMethodist)
    {
        await _studentService.SetMethodismAsync(StudentId, isMethodist);
        confirmingMethodism = false;
        confirmedMethodism = true;
    }

    private async Task DoCheckInAsync()
    {
        try
        {
            await _checkInService.CheckInAsync(EventId, StudentId);
        }
        catch
        {
            _navigationManager.NavigateTo("/checkinfailed");
            return;
        }

        _navigationManager.NavigateTo("/index/" + EventId);
    }
}