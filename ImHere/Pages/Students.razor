@page "/students"
@attribute [Authorize]

@using ImHere.Services
@using ImHere.Services.Rptos
@inject ReportingService  _reportingService
@inject StudentService  _studentService

<h1>Attendees</h1>

<div class="row">
    <div class="col-auto">
        <h3>Summary</h3>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Type</th>
                    <th scope="col">Methodist</th>
                    <th scope="col">Non-Methodist</th>
                    <th scope="col">Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var summary in studentSummaries)
                {
                    <tr>
                        <th scope="row">@summary.TypeName</th>
                        <td>@summary.MethodistCount</td>
                        <td>@(summary.Count - summary.MethodistCount)</td>
                        <td>@summary.Count</td>
                    </tr>
                }
                <tr class="table-secondary">
                    <th scope="row">Totals</th>
                    <td>@studentSummaries.Sum(s => s.MethodistCount)</td>
                    <td>@studentSummaries.Sum(s => s.Count - s.MethodistCount)</td>
                    <td>@studentSummaries.Sum(s => s.Count)</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="row sticky-top bg-white">
    <div class="col pr-0">
        <input class="form-control" type="text" placeholder="Search" @oninput="Refilter" />
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Type</th>
            <th scope="col">Methodist?</th>
            <th scope="col">Check-Ins</th>
            <th scope="col">Last Check-In</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in filteredStudents)
        {
        <tr>
            <th scope="row">@student.DisplayName</th>
            <td>@student.StudentType</td>
            <td>
                @if (@student.IsMethodist)
                {
                    <span class="oi oi-check text-success"></span>
                }
            </td>
            <td>@student.CheckInCount</td>
            <td>@(student.CheckInCount > 0 ? student.LastCheckIn.ToShortDateString() : "")</td>
            <td>
                <div style="width: 12rem">
                    <NavLink href="@("/studentForm/" + student.Id)" class="btn btn-primary">
                        <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                    </NavLink>
                    @if (student.CheckInCount == 0)
                        {
                    <button class="btn btn-danger" @onclick="() => confirmingRemovalId = student.Id" disabled="@(student.Id == confirmingRemovalId)">
                        <span class="oi oi-x"></span> Remove
                    </button>
                        }
                </div>
                @if (student.Id == confirmingRemovalId)
                    {
                <p></p>
                <div class="card" style="width: 12rem;">
                    <div class="card-body">
                        <p class="card-text">
                            Are you sure you want to remove "@($"{student.FirstName} {student.LastName}")"?
                        </p>
                        <button class="btn btn-success" @onclick="async () => await RemoveStudentAsync(student)">
                            <span class="oi oi-check"></span> Confirm
                        </button>
                        <button class="btn btn-secondary" @onclick="() => confirmingRemovalId = 0">
                            <span class="oi oi-x"></span> Cancel
                        </button>
                    </div>
                </div>
                    }
            </td>
        </tr>
        }
    </tbody>
</table>

@code {
    private IList<StudentOverviewRpto> students = new List<StudentOverviewRpto>();
    private IEnumerable<StudentOverviewRpto> filteredStudents = new List<StudentOverviewRpto>();
    private int confirmingRemovalId;
    private string searchString = "";

    private IEnumerable<(string TypeName, int Count, int MethodistCount)> studentSummaries
    {
        get
        {
            var groupedStudents = students.GroupBy(s => s.StudentType);
            return groupedStudents.Select(g => (g.Key, g.Count(), g.Where(s => s.IsMethodist).Count()));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        students = (await _reportingService.GetStudentOverviewReportDataAsync(DateTime.MinValue, DateTime.MaxValue)).OrderBy(s => s.FirstName).OrderBy(s => s.LastName).ToList();
        Refilter(null);

        await base.OnInitializedAsync();
    }

    private async Task RemoveStudentAsync(StudentOverviewRpto student)
    {
        students.Remove(student);
        Refilter(null);
        try
        {
            await _studentService.RemoveStudentAsync(student.Id);
        }
        catch
        {
            students = (await _reportingService.GetStudentOverviewReportDataAsync(DateTime.MinValue, DateTime.MaxValue)).ToList();
            Refilter(null);
            confirmingRemovalId = 0;
        }
    }

    private void Refilter(ChangeEventArgs e)
    {
        if (e != null)
            searchString = (string)e.Value;

        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredStudents = students;
            return;
        }

        var searchWords = searchString.Split(" ");


        filteredStudents = students.Where(s =>
        {
            foreach (var word in searchWords)
            {
                if (!s.FirstName.ToUpper().StartsWith(word.ToUpper()) && !s.LastName.ToUpper().StartsWith(word.ToUpper()))
                    return false;
            }
            return true;
        });
    }
}
