@page "/students"
@attribute [Authorize]

@using ImHere.Services
@using ImHere.Services.Rptos
@inject ReportingService  _reportingService
@inject StudentService  _studentService

<h1>Attendees</h1>

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Type</th>
            <th scope="col">Check-Ins</th>
            <th scope="col">Last Check-In</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr>
                <th scope="row">@($"{student.FirstName} {student.LastName}")</th>
                <td>@student.StudentType</td>
                <td>@student.CheckInCount</td>
                <td>@student.LastCheckIn.ToShortDateString()</td>
                <td>
                    <div style="width: 12rem">
                        <NavLink href="@("/studentForm/" + student.Id)" class="btn btn-primary">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                        </NavLink>
                        @if (student.CheckInCount == 0)
                        {
                            <button class="btn btn-danger" @onclick="() => confirmingRemovalId = student.Id" disabled="@(student.Id == confirmingRemovalId)">
                                <span class="oi oi-x"></span> Remove
                            </button>
                        }
                    </div>
                    @if (student.Id == confirmingRemovalId)
                    {
                        <p></p>
                        <div class="card" style="width: 12rem;">
                            <div class="card-body">
                                <p class="card-text">
                                    Are you sure you want to remove "@($"{student.FirstName} {student.LastName}")"?
                                </p>
                                <button class="btn btn-success" @onclick="async () => await RemoveStudentAsync(student)">
                                    <span class="oi oi-check"></span> Confirm
                                </button>
                                <button class="btn btn-secondary" @onclick="() => confirmingRemovalId = 0">
                                    <span class="oi oi-x"></span> Cancel
                                </button>
                            </div>
                        </div>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IList<StudentOverviewRpto> students = new List<StudentOverviewRpto>();
    private int confirmingRemovalId;

    protected override async Task OnInitializedAsync()
    {
        students = (await _reportingService.GetStudentOverviewReportDataAsync(DateTime.MinValue, DateTime.MaxValue)).ToList();

        await base.OnInitializedAsync();
    }

    private async Task RemoveStudentAsync(StudentOverviewRpto student)
    {
        students.Remove(student);
        try
        {
            await _studentService.RemoveStudentAsync(student.Id);
        }
        catch
        {
            students = (await _reportingService.GetStudentOverviewReportDataAsync(DateTime.MinValue, DateTime.MaxValue)).ToList();
            confirmingRemovalId = 0;
        }
    }
}
