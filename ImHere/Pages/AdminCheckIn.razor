@page "/admincheckin/{EventId:int}/{Year:int}/{Month:int}/{Day:int}"
@attribute [Authorize]

@using ImHere.Services.Dtos
@using ImHere.Services
@using ImHere.Data.Models
@using ShadySoft.Blazor.FocusService

@inject EventService _eventService
@inject CheckInService _checkInService
@inject StudentService  _studentService
@inject FocusService _focusService 

<h1>Add Check-In</h1>
<h3>@selectedEvent.Name</h3>

<div class="form-group">
    <label for="date">Date</label>
    <input type="date" id="date" class="form-control" @bind-value="Date" />
</div>

<div class="row" @onkeypress="KeyPressedAsync">
    <div class="col-4">
        <h3>Available Attendees</h3>
        <p>
            Search or enter new name:
        </p>
        <div class="form-row">
            <AutoFocusDiv class="col" FocusElementFunc="@(() => firstNameElement)">
                <input class="form-control" @ref="firstNameElement" type="text" placeholder="First Name" value="@firstName" @oninput="FirstNameChanged" disabled="@newStudentInitiated" @onkeypress="KeyPressedAsync" />
            </AutoFocusDiv>
            <div class="col">
                <input class="form-control" type="text" placeholder="Last Name" value="@lastName" @oninput="LastNameChanged" disabled="@newStudentInitiated" @onkeypress="KeyPressedAsync" />
            </div>
        </div>
        <p />
        Select attendee from list below:
        <p />
        @if (filteredStudents.Count() > 0)
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var i in filteredStudents)
                    {
                        var s = i;

                        <tr @key="s.Id" @onclick="(async () => await AddCheckInAsync(s))">
                            <th scope="row">@($"{s.FirstName} {s.LastName}")</th>
                            <td>@(s.StudentTypeDescription)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="row">
                <div class="col">
                    @foreach (var i in studentTypes)
                    {
                        var st = i;
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="studentType" id="@($"studentType{st.Id}")" checked="@(studentTypeId == st.Id)" @onchange="() => studentTypeId = st.Id" disabled="@newStudentInitiated" @onkeypress="KeyPressedAsync">
                            <label class="form-check-label" for="@($"studentType{st.Id}")">
                                @st.Description
                            </label>
                        </div>
                    }
                </div>
                <div class="col-auto">
                    <button class="btn btn-success" type="button" disabled="@(!FormIsValid || newStudentInitiated)" @onclick="() => newStudentInitiated = true">
                        <span class="oi oi-plus" /> Add New Attendee
                    </button>
                </div>
            </div>
            @if (newStudentInitiated)
            {
                <p />
                <div>
                    Do you want to add and check-in <strong>@($"{firstName} {lastName}")</strong> as a <strong>@studentTypes.Single(st => st.Id == studentTypeId).Description</strong>?
                </div>
                <p />
                <button class="btn btn-success" type="button" @onclick="AddAndCheckInNewStudent">
                    <span class="oi oi-check" /> Register and Check In
                </button>
                <button class="btn btn-secondary" type="button" @onclick="CancelNewStudent">
                    Cancel
                </button>

                @if (StudentNameIsCheckedIn(firstName, lastName))
                {
                    <p />
                    <div class="alert alert-danger">
                        An attendee by that name is already checked in. If you proceed you will be creating a second attendee by the same name.
                    </div>
                }
            }
        }
    </div>
    <div class="col-8">
        <h3>Check-Ins (Count: @checkIns.Count())</h3>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col"></th>
                    <th scope="col">Timestamp</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var i in checkIns.OrderByDescending(c => c.Id))
                {
                    var c = i;

                    <tr @key="c.Id">
                        <th scope="row">@($"{c.Student.FirstName} {c.Student.LastName}")</th>
                        <td class="text-muted">@c.Student.StudentTypeDescription</td>
                        <td>@($"{c.TimeStamp.ToShortDateString()} - {c.TimeStamp.ToShortTimeString()}")</td>
                        <td>
                            @if (c.IsAdminCheckIn)
                            {
                                <button class="btn btn-outline-danger" @onclick="async () => await RemoveCheckInAsync(c)">
                                    <span class="oi oi-trash" />
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public int EventId { get; set; }
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Day { get; set; }

    private DateTime _date;
    private EventDto selectedEvent = new EventDto();
    private DateTime eventStart;
    private string firstName = "";
    private string lastName = "";
    private int studentTypeId = 1;
    private bool newStudentInitiated = false;

    private ElementReference firstNameElement;

    private IList<CheckInDto> checkIns = new List<CheckInDto>();
    private IList<StudentDto> allStudents = new List<StudentDto>();
    private IList<StudentDto> filteredStudents = new List<StudentDto>();
    private IEnumerable<StudentType> studentTypes = new List<StudentType>();

    private DateTime Date
    {
        get
        {
            return _date;
        }
        set
        {
            _date = value;
            eventStart = Date + selectedEvent.Schedule.StartTime.TimeOfDay;
            UpdateListsAsync();
        }
    }

    private bool FormIsValid => !string.IsNullOrWhiteSpace(firstName) && !string.IsNullOrWhiteSpace(lastName);

    private async Task UpdateListsAsync()
    {
        checkIns = (await _checkInService.GetCheckInsAsync(EventId, eventStart)).ToList();
        studentTypes = (await _studentService.GetStudentTypesAsync()).OrderBy(st => st.Id);
        studentTypeId = studentTypes.First().Id;
        allStudents = (await _studentService.GetStudentsNotCheckedInAsync(EventId, eventStart)).ToList();
        FilterStudents();
    }

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await _eventService.GetEventAsync(EventId);

        Date = new DateTime(Year, Month, Day);

        await base.OnInitializedAsync();
    }

    private void FirstNameChanged(ChangeEventArgs e)
    {
        firstName = e.Value.ToString();
        FilterStudents();
    }


    private void LastNameChanged(ChangeEventArgs e)
    {
        lastName = e.Value.ToString();
        FilterStudents();
    }

    private async Task AddCheckInAsync(StudentDto student)
    {
        allStudents.Remove(student);
        FilterStudents();

        var newCheckIn = new CheckInDto();

        try
        {
            newCheckIn = await _checkInService.AdminCheckInAsync(selectedEvent.Id, student.Id, Date);
        }
        catch
        {
            allStudents.Add(student);
            FilterStudents();
            return;
        }

        checkIns.Add(newCheckIn);
        ClearForm();
    }

    private void CancelNewStudent()
    {
        newStudentInitiated = false;
    }

    private async Task AddAndCheckInNewStudent()
    {
        var newStudent = await _studentService.CreateStudentAsync(new StudentDto
        {
            FirstName = firstName,
            LastName = lastName,
            StudentTypeId = studentTypeId
        });

        var newCheckIn = await _checkInService.AdminCheckInAsync(selectedEvent.Id, newStudent.Id, Date);

        checkIns.Add(newCheckIn);
        ClearForm();
    }

    private async Task RemoveCheckInAsync(CheckInDto checkIn)
    {
        checkIns.Remove(checkIn);
        allStudents.Add(checkIn.Student);
        FilterStudents();
        StateHasChanged();

        try
        {
            await _checkInService.RemoveCheckInAsync(checkIn.Id);
        }
        catch
        {
            checkIns.Add(checkIn);
            allStudents.Remove(checkIn.Student);
            FilterStudents();
        }
    }

    private async Task KeyPressedAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (filteredStudents.Count == 1)
            {
                await AddCheckInAsync(filteredStudents.First());
                return;
            }

            if (filteredStudents.Count == 0)
            {
                newStudentInitiated = true;
            }
        }
    }

    private void ClearForm()
    {
        newStudentInitiated = false;
        firstName = "";
        lastName = "";
        studentTypeId = studentTypes.First().Id;

        StateHasChanged();

        FilterStudents();
        StateHasChanged();
        SetFirstNameFocusAsync();
    }

    private void FilterStudents()
    {
        filteredStudents = allStudents.Where(s =>
                s.FirstName.ToUpper().StartsWith(firstName.ToUpper()) &&
                s.LastName.ToUpper().StartsWith(lastName.ToUpper()))
            .OrderBy(s => s.FirstName).OrderBy(s => s.LastName).ToList();
    }

    private async Task SetFirstNameFocusAsync()
    {
        await _focusService.SetFocusAsync(firstNameElement);
    }

    private bool StudentNameIsCheckedIn(string firstName, string lastName)
    {
        return checkIns.Any(c => c.Student.FirstName.ToUpper() == firstName.ToUpper() && c.Student.LastName.ToUpper() == lastName.ToUpper());
    }
}