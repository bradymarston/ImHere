@page "/eventform"
@page "/eventform/{eventId}"
@attribute [Authorize]


@using ImHere.Services.Dtos
@using ImHere.Services

@inject EventService _eventService
@inject NavigationManager _navigationManager

@if (currentEvent.Id == 0)
{
    <h1>Create Event</h1>
} else
{
    <h1>Edit Event</h1>
}

<div class="row">
    <div class="col-md-8 col-lg-6 col-xl-4">
        <EditForm Model="@currentEvent" OnValidSubmit="@SubmitAsync">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="event-name">Event Name</label>
                <InputText id="event-name" class="form-control" @bind-Value="@currentEvent.Name" placeholder="New Event" />
                <small class="form-text">
                    <ValidationMessage For="@(() => currentEvent.Name)" />
                </small>
            </div>
            <div class="form-row">
                <div class="form-group col-sm-6">
                    <label for="start-time">Start Time</label>
                    <InputTime id="start-time" class="form-control" @bind-Value="@currentEvent.Schedule.StartTime" />
                    <small class="form-text">
                        <ValidationMessage For="@(() => currentEvent.Schedule.StartTime)" />
                    </small>
                </div>
                <div class="form-group col-sm-6">
                    <label for="duration">Duration (in hours)</label>
                    <InputNumber id="duration" class="form-control" @bind-Value="@currentEvent.Schedule.Duration" />
                    <small class="form-text">
                        <ValidationMessage For="@(() => currentEvent.Schedule.Duration)" />
                    </small>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="schedule-type">Schedule Type</label>
                    <select id="schedule-type" class="form-control" value="@scheduleType" @onchange="ChangeScheduleType">
                        <option value="once">One Time</option>
                        <option value="weekly">Weekly</option>
                    </select>
                </div>
                @if (currentEvent.Schedule.GetType() == typeof(OneTimeScheduleInfoDto))
                {
                    <div class="form-group col-md-6">
                        <label for="date">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="((OneTimeScheduleInfoDto)currentEvent.Schedule).Date" />
                        <small class="form-text">
                            <ValidationMessage For="@(() => ((OneTimeScheduleInfoDto)currentEvent.Schedule).Date)" />
                        </small>
                    </div>
                }
                @if (currentEvent.Schedule.GetType() == typeof(WeeklyScheduleInfoDto))
                {
                    <div class="form-group col-md-6">
                        <label for="day">Day of Week</label>
                        <InputSelect id="day" class="form-control" @bind-Value="((WeeklyScheduleInfoDto)currentEvent.Schedule).Day">
                            @foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
                                {
                                <option value="@day">@day</option>
                                }
                            /**/
                        </InputSelect>
                    </div>
                }
                <div class="form-group form-check">
                    <input type="checkbox" class="form-check-input" id="requireConfirmation" checked="@currentEvent.RequireConfirmation" @onchange="@((e) => currentEvent.RequireConfirmation = (bool)e.Value)">
                    <label class="form-check-label" for="requireConfirmation">Require Confirmation Page</label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">
                @if (currentEvent.Id == 0)
                {
                    <span><span class="oi oi-plus" aria-hidden="true"></span> Create Event</span>
                }
                else
                {
                    <span><span class="oi oi-check" aria-hidden="true"></span> Save Changes</span>
                }
            </button>
            <NavLink href="events" class="btn btn-secondary">
                Cancel
            </NavLink>
        </EditForm>
    </div>
</div>

@code {
    private EventDto currentEvent = new EventDto();
    private string scheduleType = "once";

    [Parameter]
    public string EventId { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        int eventId;

        if (int.TryParse(EventId, out eventId))
            currentEvent = await _eventService.GetEventAsync(eventId);

        if (currentEvent == null)
            currentEvent = new EventDto();

        scheduleType = currentEvent.Schedule switch
        {
            WeeklyScheduleInfoDto scheduleInfoDto => "weekly",
            _ => "once"
        };
    }

    private void ChangeScheduleType(ChangeEventArgs e)
    {
        scheduleType = (string)e.Value;

        EventScheduleInfoDtoBase newSchedule = scheduleType switch
        {
            "weekly" => new WeeklyScheduleInfoDto(),
            _ => new OneTimeScheduleInfoDto()
        };

        if (currentEvent.Schedule.GetType() == newSchedule.GetType())
            return;

        newSchedule.StartTime = currentEvent.Schedule.StartTime;
        newSchedule.Duration = currentEvent.Schedule.Duration;

        currentEvent.Schedule = newSchedule;
        StateHasChanged();
    }

    private async Task SubmitAsync(EditContext context)
    {
        if (currentEvent.Id == 0)
            await _eventService.CreateEventAsync(currentEvent);
        else
            await _eventService.UpdateEventAsync(currentEvent);

        _navigationManager.NavigateTo("events");
    }
}
