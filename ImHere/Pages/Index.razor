@page "/"
@page "/index/{LoadEventId:int}"

@using ImHere.Services
@using ImHere.Services.Dtos

@inject StudentService _studentService
@inject EventService _eventService
@inject NavigationManager _navigationManager

<div class="row">
    <div class="col-md-10 col-lg-8 col-xl-6">
        @if (events.Count() == 0)
        {
            <h3>No currently active event available for check-in.</h3>
        }
        else
        {
            @if (events.Count() == 1)
            {
                <h3>Welcome to @events.First().Name</h3>
            }
            else
            {
                <h3>Select an event to check-in:</h3>
                <p></p>
                <select class="form-control" @bind="SelectedEventId">
                    @foreach (var e in events)
                    {
                        <option value="@e.Id">@e.Name</option>
                    }
                </select>
                <p></p>
            }

            @if (currentEvent.Id != 0)
            {
                <h3>Select your name below:</h3>
                <div class="row sticky-top bg-white">
                    <div class="col pr-0">
                        <p></p>
                        <input class="form-control" type="text" placeholder="Search" @oninput="Refilter" @onkeypress="KeyPressed" />
                    </div>
                    <div class="col-auto">
                        <p></p>
                        <NavLink href="studentform" class="btn btn-success">
                            First Time Here?
                        </NavLink>
                    </div>
                </div>
                <p></p>
                <table class="table table-hover" style="cursor: pointer;">
                    <tbody>
                        @foreach (var student in filteredStudents)
                        {
                            <tr @onclick="@(() => StudentSelected(student))">
                                <td>@(student.FirstName + " " + student.LastName)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</div>


@code
{
    [Parameter]
    public int LoadEventId { get; set; }

    public string SelectedEventId
    {
        get
        {
            return _selectedEventId;
        }
        set
        {
            _selectedEventId = value;

            if (value == "0")
                currentEvent = new EventDto();
            else
            {
                var selectedEvent = events.SingleOrDefault(e => e.Id.ToString() == value);

                if (selectedEvent is null)
                    return;

                currentEvent = selectedEvent;
            }
        }
    }

    private string _selectedEventId = "0";
    private IEnumerable<StudentDto> students = new List<StudentDto>();
    private IEnumerable<StudentDto> filteredStudents = new List<StudentDto>();
    private IEnumerable<EventDto> events = new List<EventDto>();
    private EventDto currentEvent = new EventDto();

    private string searchString = "";

    protected async override Task OnInitializedAsync()
    {
        events = await _eventService.GetHappeningEventsAsync();
        if (events.Count() == 1)
            currentEvent = events.First();

        if (LoadEventId > 0)
            if (events.Any(e => e.Id == LoadEventId))
            {
                SelectedEventId = LoadEventId.ToString();
            }

        students = (await _studentService.GetStudentsAsync()).OrderBy(s => s.FirstName).OrderBy(s => s.LastName);
        Refilter(null);

        await base.OnInitializedAsync();
    }

    private void Refilter(ChangeEventArgs e)
    {
        if (e != null)
            searchString = (string)e.Value;

        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredStudents = students;
            return;
        }

        var searchWords = searchString.Split(" ");


        filteredStudents = students.Where(s =>
        {
            foreach (var word in searchWords)
            {
                if (!s.FirstName.ToUpper().StartsWith(word.ToUpper()) && !s.LastName.ToUpper().StartsWith(word.ToUpper()))
                    return false;
            }
            return true;
        });
    }

    private void StudentSelected(StudentDto student)
    {
        _navigationManager.NavigateTo("/studentcheckin/" + student.Id + "/" + currentEvent.Id);
    }

    private void KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && filteredStudents.Count() == 1)
            StudentSelected(filteredStudents.First());
    }
}
